// üìò Apuntes del archivo index.js

// ‚úÖ 1. Declaraci√≥n de una variable con let
let hello = "hello world from Node.js"; 
// Se declara una variable llamada hello.
// Contiene un string con el texto: "hello world from Node.js".

// ‚úÇÔ∏è 2. Uso del m√©todo .slice()
let justNode = hello.slice(17); 
// .slice() cuenta desde 0, as√≠ que la posici√≥n 17 corresponde a la letra "N" de "Node.js".
// Devuelve desde esa posici√≥n hasta el final: "Node.js".

// üñ®Ô∏è 3. Imprimir en consola usando template literals
console.log(`who let the ${justNode} out ?`);
// Usa comillas invertidas (`) y ${} para insertar la variable justNode dentro del string.
// Resultado en consola: who let the Node.js out ?

// üí¨ Diferencia entre Template Literals y Concatenaci√≥n:

// ‚úÖ Usando Template Literals (m√°s limpio y moderno):
let nombre = "Javier";
let producto = "lentes";
let precio = 499;

console.log(`Hola, ${nombre},
Gracias por comprar ${producto}.
El total a pagar es $${precio}.`);
// Ventajas: legible, soporta multil√≠nea sin \n, ideal para strings complejos.

// ‚ùå Usando concatenaci√≥n con + (forma antigua):
console.log("Hola, " + nombre + ",\n" +"Gracias por comprar " + producto + ".\n" +"El total a pagar es $" + precio + ".");
// Desventajas: dif√≠cil de leer, requiere \n para saltos de l√≠nea.

// ‚úÖ Conclusi√≥n:
// Los template literals son la mejor opci√≥n para crear textos din√°micos en JS moderno.
// Siempre que puedas, usa comillas invertidas (`) con ${variables} para claridad y limpieza.

